---
title: "Data Visualization"
format: html
---

## Set up
```{r}
#| message: false
#| warning: false

library(readr)
library(dplyr)
library(tidyr)
library(forcats) # makes working with factors easier
library(ggplot2)
library(leaflet) # interactive maps
library(DT) # interactive tables
library(scales) # scale functions for visualization
library(janitor) # expedite cleaning and exploring data
library(viridis) # colorblind friendly color pallet
```


## Read Data
Data retrieved from [EDI](https://portal.edirepository.org/nis/mapbrowse?packageid=edi.587.1).

```{r}
#| message: false
#| warning: false

delta_visits_raw <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f")

colnames(delta_visits_raw)

delta_visits <- delta_visits_raw %>% 
  clean_names() #cleans column names

colnames(delta_visits)
```

Exploring our data
```{r}
glimpse(delta_visits)

range(delta_visits$date)
```


## Cleaning and organizing data
```{r}
visit_long <- delta_visits %>% 
  pivot_longer(cols = c("sm_boat", "med_boat", "lrg_boat", 
                        "bank_angler", "scientist", "cars"), 
               names_to = "visitor_type",
               values_to = "quantity") %>%
  rename(restore_loc = eco_restore_approximate_location) %>%
  select(-notes)
```


## Calculating daily visits by location
```{r}
#| warning: false
#| message: false

daily_visits_loc <- visit_long %>% 
  group_by(restore_loc, date, visitor_type) %>% 
  summarize(daily_visits = sum(quantity))

```


## Plotting with `ggplot2()`
```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, 
           y = daily_visits)) + 
  geom_col()
```

## Choosing a different `geom_*`
```{r}
daily_visits_loc %>%
  separate(date, c("year", "month", "day"), sep = "-") %>% 
  filter(daily_visits < 30,
         visitor_type %in% c("sm_boat", "med_boat", "lrg_boat")) %>% 
  ggplot(aes(x = visitor_type, 
             y = daily_visits)) +
  geom_boxplot()
```


## Customizing our plot
```{r}
#| eval: false
#| echo: false

ggplot(data = daily_visits_loc, 
       aes(x = restore_loc,
           y = daily_visits)) + 
  geom_col(fill = "blue")
```

```{r}
#| echo: false

ggplot(data = daily_visits_loc,
       aes(x = restore_loc,
           y = daily_visits,
           fill = visitor_type))+
  geom_col()+
  labs(x = "Restoration Location", 
       y = "Number of Visits",
       fill = "Type of Visitors",
       title = "Total Visits to Restoration Sites",
       subtitle = "Sum of daily visits during study period") + 
  coord_flip()+
  theme_bw()+
  theme(legend.position = "bottom",
        axis.ticks.y = element_blank())+
  scale_y_continuous(breaks = seq(0,120,20), expand = c(0,0), limits = c(0,125))+
  scale_fill_viridis_d()

## saving plot
ggsave("../plots/visit_restore_loc_delta.png", width = 12, height = 6, units = "in")
```


## Interactive Visualizations

`DT` Package for interactive tables
```{r}
locations <- visit_long %>% 
  distinct(restore_loc, .keep_all = TRUE) %>% 
  select(restore_loc, latitude, longitude) 

```

```{r}
datatable(locations)
```


Interactive Maps with `leaflet`

```{r}
leaflet(locations) %>% 
  addTiles() %>%
  addMarkers(lng = ~longitude, 
             lat = ~latitude,
             popup = ~restore_loc)
```

```{r}
leaflet(locations) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)
```

