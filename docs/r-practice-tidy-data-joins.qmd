---
title: "R Practice: Tidy Data and Joins"
format: html
---

## Setup
```{r}
#| warning: false
#| message: false
library(readr)
library(dplyr)
library(lubridate)
```

# Excercise 9.1

## Read Data
```{r}
bird_observations <- read.csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=53edaa7a0e083013d9bf20322db1780e")

surveys <- read.csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=b2466fa5cb5ed7ee1ea91398fc291c59")

sites <- read.csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=81bf72420e69077097fb0790dcdc63a6")

taxalist<- read.csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=58f863b7e3066e68536a9cacdc7bd58e")
```

```{r}
#| echo: false
#| eval: false

head(bird_observations)#compound key with species_id and survey_id #Foreign Key: survey_id, site_id, species_id
head(sites)#Primary Key: site_id  #No foreign key
head(surveys)#Primary Key: survey_id #Foreign Key: site_id
head(taxalist)#Primary Key: species_id

colnames(bird_observations)
colnames(surveys)
colnames(sites)

str(bird_observations)

unique(bird_observations$species_id)

unique(bird_observations$site_id)
```

## Subsetting bird_observations

Looking for Brown-headed Cowbird and Red-winged Blackbird in sites LI-W and NU-C

```{r}
birds_subset <- bird_observations %>% 
  filter(species_id %in% c("BHCO", "RWBL") & 
           site_id %in% c("LI-W", "NU-C"))
```

## Joins

Question:

> What do you expect a `left_join()` between birds_subset and sites to contain? 

I expect `left_join()` between birds_subset (left) and sites (right) to contain the park_code, park_district, park_name, point_code, point_location, and point_acreage from each row in sites that has a matching site_id with birds_subset.

### `left_join()`
```{r}
birds_left <- left_join(x = birds_subset, 
                        y = sites, 
                        by = "site_id")


```

### `full_join()`
```{r}
birds_full <- full_join(x = birds_subset,
                        y = sites,
                        by = "site_id")

```

### `inner_join()`

Question:

> What do you expect an `inner_join()` between birds_subset and taxalist to contain?

I expect birds_inner to include the common species name and asu_itis value that corresponds only with BHCO and RWBL.

```{r}
birds_inner <- inner_join(x = birds_subset,
                          y = taxalist,
                          by = "species_id")
```

### `left_join()`

This should look the exact same to the `inner_join()` above as birds_subset only has the two species_id values. 
```{r}
birds_inner_left <- left_join(x = birds_subset, y = taxalist, by = "species_id")
```

Question:

> Why does that make sense for this scenario? In what case would you expect the outcome to differ from an `inner_join()`?

This makes sense for this scenario as birds_subset only has two species_id values that are included in the taxalist. If birds_subset had additional species names that were not included in the taxalist set, then the resulting birds_inner would not include the entries with those species names where the birds_left would--with the 'common_name' and 'asu_itis' columns having NAs in the rows with the species that are not in the taxalist.

# Excercise 9.2

## Changing bird_observations with `rename()`
```{r}
bird_observations <- bird_observations %>% 
  rename(bird_obs_notes = notes)
```

##Subsetting, Joining, and Filtering bird_observations
```{r}
birds_obs_subset <- bird_observations %>% 
  full_join(y = taxalist, by = "species_id") %>%
  full_join(y = sites, by = "site_id") %>%
  full_join(y = surveys, by = c("site_id", "survey_id"))%>%
  select(survey_date, common_name, park_name, bird_count, observer)
  
```

## Exploring and fixing `observer`

Question:

> How many observers are there? Which value is unlike the others?

```{r}
unique(birds_obs_subset$observer)
```

There are 7 observers. One is NA and the other is not in the format of first initial, period, and last name, e.g., D. Stuart.

### Correcting Josh Burns to J. Burns
```{r}
birds_obs_subset <- birds_obs_subset %>% 
  mutate(observer = if_else(condition = observer == "Josh Burns", 
          true = "J. Burns",
          false = observer))

unique(birds_obs_subset$observer)
```

# 9.2.3 Bonus Challenge

## Lubridate 
```{r}
tot_birds_obs_subset <- birds_obs_subset %>% 
  mutate(survey_month = lubridate::month(survey_date)) %>%
  mutate(survey_month = as.factor(survey_month)) %>% 
  relocate(survey_month, .after = survey_date) %>%
  filter(park_name %in% c("Lindo", "Orme", "Palomino", "Sonrisa")) %>%
  group_by(park_name, survey_month)%>%
  summarize(tot_bird_count_month = n())%>%
  ungroup()

head(tot_birds_obs_subset)
```

Question:

> Take a look at your final data frame. Does it give you the outcome you expected? Is it informative? How would you improve this wrangling process?

It looks like how I expected to turn out. It is informative and should probably do well in ggplot. I changed the wrangling process by creating a new name for the resulting total bird per park for every month. 
